{
  "version": 3,
  "file": "js/config.js",
  "sources": [
    "helpers/helpers.js",
    "helpers/createFrequencies.js",
    "solmiBasics.js",
    "models/playSound.js",
    "models/playStaff.js",
    "helpers/createSolmiArrayFromToneNumbers.js",
    "models/randomize.js",
    "models/playCommon.js",
    "models/startfrequenciestuner.js",
    "views/forms.js",
    "views/additional.js",
    "solmiMain.js",
    "solmi.js",
    "config.js"
  ],
  "names": [],
  "mappingsnHA,ADoHA;ACnzpLA,ADqLA;ACprxMA,ADyMA;ACxjbA,ADcA;ACb
  "sourcesContent": [
    "define('helpers/helpers',[\n    'jquery',\n    'underscore',\n    'backbone'\n], function ($, _, Backbone) {\n\n//    return function () {\n//        that = this;\n    return {\n//    var handler = {\n        array_flip: function (trans) { // Not used at the moment             var key, tmp_ar = {};\n\n            for (key in trans) {\n                if (trans.hasOwnProperty(key)) {\n                }\n                {\n                    tmp_ar[trans[key]] = key;\n                }\n            }\n            return tmp_ar;\n        },\n        //DEPRECIATED:\n        createFrequencies: function () {\n            var frequencies = '';\n            for (var i = 1; i <= 111; i++) { // Later: Calculate 111\n                var frequency = (Math.pow(2, (i - 49) / 12) * 440);\n                frequencies += '\"' + i + '\":' + frequency.toFixed(2) + ',';\n            }\n            frequencies = frequencies.slice(0, frequencies.length - 1);\n            return JSON.parse('{' + frequencies + '}');\n        },\n        flipObject: function (original) {\n            var flipped = {};\n            $.each(original, function (i, el) {\n                flipped[el] = i;\n            });\n            return flipped;\n        },\n        getPositionInScaleOfBasicTone: function (basicTone) {\n            if (basicTone < 0) {\n                basicTone += 12;\n            }\n            var position = basicTone % 12;\n            if (position === 0) {\n                position = 12;\n            }\n            return position;\n        },\n        getPositionInScaleOfToneNumber: function (toneNumber) {\n            var position = (toneNumber - 3) % 12;\n            if (position === 0) {\n                position = 12;\n            }\n            return position;\n        },\n//        //DEPRECIATED:\n//        getScaleOfToneNumber: function (toneNumber) {\n//            return Math.ceil((toneNumber - 3) / 12);\n//        },\n        scalesLimit: function (scaleRange) {\n            var scalesLimit = '';\n            for (var i = scaleRange[0]; i <= scaleRange[1]; i++) {\n                scalesLimit += '\"' + i + '\":' + '{\"super\":' + (scaleRange[1] - i) + ',\"sub\":' + (i - scaleRange[0]) + '},';\n\n            }\n            scalesLimit = scalesLimit.slice(0, scalesLimit.length - 1);\n            return JSON.parse('{' + scalesLimit + '}');\n        },\n//        setIfFrequencyNrIsHalf: function (staffRange, positionOfHalvesInScale) { // at the moment only useful for staff\n//            console.log('helpers.js setIfFrequencyNrIsHalf, this', this);\n//            var frequencyNrIsHalf = {};\n//            for (var i = staffRange[0]; i < staffRange[1]; i++) {\n//                var scalePosition = this.getPositionInScaleOfToneNumber(i);\n//                var halfPosition = $.inArray(scalePosition, positionOfHalvesInScale['major']);\n//                if (halfPosition > -1) {\n//                    frequencyNrIsHalf[i] = 1;\n//                } else {\n//                    frequencyNrIsHalf[i] = 0;\n//                }\n//            }\n//            return frequencyNrIsHalf;\n//        },\n        setPositionStaffForSoundKey: function (positionOfHalvesInScale, position, mm) {\n            console.log('helpers.js setPositionStaffForSoundKey');\n            //    function setPositionStaffForSoundKey(position, mm, positionCorrection) {\n            var positionStaff = position;\n            for (var i = 0; i < positionOfHalvesInScale[mm].length; i++) {\n                if (positionOfHalvesInScale[mm][i] < position) {\n                    //            if (positionOfHalvesInScale[mm][i] < (position + positionCorrection)) {\n                    positionStaff -= 1;\n                }\n            }\n            return positionStaff;\n        },\n        setScalesCurrent: function (scaleRange, centralViewScale, scalesCurrent) {\n\n            if (scalesCurrent.length > 0) {\n                $('#all-squares .squares-3x3').removeClass('scale-pos-' + scalesCurrent.join(' scale-pos-'));\n            }\n//            console.log('setScalesCurrent, centralViewScale', centralViewScale);\n//            console.log('setScalesCurrent, scalesCurrent before', scalesCurrent);\n//            console.log('setScalesCurrent, scaleRange', scaleRange);\n            if (centralViewScale > scaleRange[0] && centralViewScale < scaleRange[1]) {\n                scalesCurrent = [centralViewScale + 1, centralViewScale, centralViewScale - 1];\n            }\n\n            console.log('setScalesCurrent, scalesCurrent after', scalesCurrent);\n            $('#all-squares .squares-3x3').each(function (index) {\n                $(this).addClass('scale-pos-' + scalesCurrent[index]);\n            });\n            return scalesCurrent;\n        }\n    };\n//    return {handler: handler };\n//    };\n});\n",
    "define('helpers/createFrequencies',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'helpers/helpers'\n], function ($, _, Backbone, helpers) {\n    \n    var positionOfFullInScale;\n    var soundKeys2;\n    var basicTonesMajor2;\n    var basicTonesMinorRaw2;\n\n    return {\n        getFrequenciesInfo: function (soundKeys2a, basicTonesMajor2a, basicTonesMinorRaw2a, positionOfHalvesInScale, positionOfFullInScale1) {\n//            this.positionOfFullInScale = positionOfFullInScale;\n            positionOfFullInScale = positionOfFullInScale1;\n            basicTonesMajor2 = basicTonesMajor2a;\n            basicTonesMinorRaw2 = basicTonesMinorRaw2a;\n            soundKeys2 = soundKeys2a;\n            var frequencies = {};\n            frequencies = {};\n            var positionOf7 = 0;\n            var mmArray = ['major', 'minor'];\n            for (var f = 4; f <= 111; f++) { // maybe later 99 instead of 111\n//        for (var f = 4; f <= 4; f++) {\n                frequencies[f] = {};\n                var frequency = (Math.pow(2, (f - 49) / 12) * 440);\n                frequencies[f]['hertz'] = frequency.toFixed(2);\n                frequencies[f]['scale'] = Math.ceil((f - 3) / 12);\n                var scalePositionOf12 = helpers.getPositionInScaleOfToneNumber(f);\n                frequencies[f]['scalePositionOf12'] = scalePositionOf12;\n                var likeWhiteKey = 1;\n                var halfPosition = $.inArray(scalePositionOf12, positionOfHalvesInScale['major']);\n                if (halfPosition > -1) {\n                    likeWhiteKey = 0;\n                }\n                frequencies[f]['whiteKey'] = likeWhiteKey;\n                positionOf7 += likeWhiteKey;\n                frequencies[f]['positionOf7'] = positionOf7;\n                frequencies[f]['soundKey'] = {};\n                for (var m = 0; m < mmArray.length; m++) {\n                    frequencies[f]['soundKey'][mmArray[m]] = {};\n                    for (var sKey = 1; sKey <= 12; sKey++) {\n//                for (var sKey = 1; sKey <= 4; sKey++) {\n//                var soundKeyBaseFrequency = i - 3\n                        if (soundKeys2[mmArray[m]][sKey]) {\n                            var solmiToneInfo = this.getSolmiToneOfSoundKeyFromFrequency(f, sKey, mmArray[m], scalePositionOf12);\n                            frequencies[f]['soundKey'][mmArray[m]][sKey] = solmiToneInfo;\n                            frequencies[f]['soundKey'][mmArray[m]][sKey]['name'] = soundKeys2[mmArray[m]][sKey]['name'];\n//                        console.log('getFrequenciesInfo frequencies: ', frequencies);\n//                        dgsrdfgdg\n                        }\n                    }\n                }\n            }\n            console.log('getFrequenciesInfo frequencies: ', frequencies);\n//            var frequenciesString = JSON.stringify(frequencies);\n//            $('#solmi-strings').after('<pre>' + frequenciesString + '</pre>');\n            return frequencies;\n        },\n        getSolmiToneOfSoundKeyFromFrequency: function (frequencyNr, soundKeyNr, mm, scalePosition) {\n            //        var scalePosition = getPositionInScaleOfToneNumber(frequencyNr);\n            var scaleBaseFrequencyNr = frequencyNr - (scalePosition - 1);\n            var soundKeyBaseFrequencyNr = scaleBaseFrequencyNr + (soundKeyNr - 1);\n            var solmiToneNr = helpers.getPositionInScaleOfBasicTone(frequencyNr - soundKeyBaseFrequencyNr + 1);\n\n            var solmiToneNr2 = $.inArray(solmiToneNr, positionOfFullInScale[mm]);\n\n            var solmiToneInfo = {};\n            solmiToneInfo['TEST10-frequencyNr'] = frequencyNr;\n            solmiToneInfo['TEST20-soundKeyNr'] = soundKeyNr;\n            solmiToneInfo['TEST30-scalePosition'] = scalePosition;\n            solmiToneInfo['TEST40-scaleBaseFrequencyNr'] = scaleBaseFrequencyNr;\n            solmiToneInfo['TEST50-soundKeyBaseFrequencyNr'] = soundKeyBaseFrequencyNr;\n            solmiToneInfo['TEST60-solmiToneNr-1'] = solmiToneNr;\n            solmiToneInfo['TEST70-solmiToneNr2'] = solmiToneNr2;\n\n            solmiToneInfo['basicToneNrOf12orig'] = solmiToneNr;\n            var half = '';\n            if (solmiToneNr2 === -1) {\n                var half = soundKeys2[mm][soundKeyNr]['half'];\n                solmiToneInfo['TEST80-half'] = half;\n                if (half === 'u') {\n                    solmiToneNr++;\n                } else if (half === 'i') {\n                    solmiToneNr--;\n                } else if (half === '') { // for soundKey C, a\n                    solmiToneNr--;\n                    half = 'i';\n                }\n                solmiToneInfo['TEST90-half'] = half;\n            }\n            if (mm === 'major') {\n                solmiToneInfo['basicTone'] = basicTonesMajor2[solmiToneNr];\n                solmiToneInfo['TEST110-basicTone-major'] = basicTonesMajor2[solmiToneNr];\n            } else {\n                solmiToneInfo['basicTone'] = basicTonesMinorRaw2[solmiToneNr];\n                solmiToneInfo['TEST120-basicTone-minor'] = basicTonesMinorRaw2[solmiToneNr];\n            }\n            solmiToneInfo['basicToneNrOf12'] = solmiToneNr;\n            solmiToneInfo['activeHalf'] = half;\n            return solmiToneInfo;\n        }\n    };\n});\n",
    "define('solmiBasics',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'helpers/helpers',\n    'helpers/createFrequencies'\n], function ($, _, Backbone, helpers, createFrequencies) {\n//define(function(){\n    console.log('solmiBasics.js 1, helpers', helpers);\n\n    var basicTones = new Array('d', 'r', 'm', 'f', 's', 'l', 't');\n    var basicTonesMajor = {'d': 1, 'r': 3, 'm': 5, 'f': 6, 's': 8, 'l': 10, 't': 12};\n    var basicTonesMajor2 = helpers.flipObject(basicTonesMajor);\n    var basicTonesMinorRaw = {'l': 1, 't': 3, 'd': 4, 'r': 6, 'm': 8, 'f': 9, 's': 11};\n    var basicTonesMinorRaw2 = helpers.flipObject(basicTonesMinorRaw);\n    var basicTonesMinor = {'l': 1 + 12, 't': 3 + 12, 'd': 4, 'r': 6, 'm': 8, 'f': 9, 's': 11};\n\n    var scaleRange = [1, 9];\n    var centralViewScaleForStart = 4;\n    var centralViewScale = 0 + centralViewScaleForStart;\n\n    var scalesCurrent = [];\n    scalesCurrent = helpers.setScalesCurrent(scaleRange, centralViewScale, scalesCurrent);\n    console.log('solmiBasics.js scalesCurrent', scalesCurrent);\n    var scalesLimit = helpers.scalesLimit(scaleRange);\n//    var notesInStaffStart = {'signature-start-left': 60, 'start-left': 120, 'start-bottom': 107, 'height-diff': 7, 'notes-diff': 4,\n//        'notes-left-current': 0, 'note-width': 35, 'inter-tone-signs-width': 6, 'continue': true};\n    var notesInStaffStart = {'signature-start-left': 60, 'start-left': 120, 'start-bottom': 110, 'height-diff': 6.8, 'notes-diff': 4,\n        'notes-left-current': 0, 'note-width': 35, 'inter-tone-signs-width': 6, 'continue': true};\n\n    var staffRange = [16, 64];\n    var positionOfHalvesInScale = {'major': [2, 4, 7, 9, 11], 'minor': [2, 5, 7, 10, 12]};\n    var positionOfFullInScale = {'major': [1, 3, 5, 6, 8, 10, 12], 'minor': [1, 3, 4, 6, 8, 9, 11]};\n//    var frequencyNrIsHalf = helpers.setIfFrequencyNrIsHalf(staffRange, positionOfHalvesInScale);\n\n    //DEPRECIATED:\n    var soundKeys = {\n        major: {\n            'C': {'position': 1, 'half': '', 'signs': 0}, 'Des': {'position': 2, 'half': 'u', 'signs': 5},\n            'D': {'position': 3, 'half': 'i', 'signs': 2}, 'Es': {'position': 4, 'half': 'u', 'signs': 3},\n            'E': {'position': 5, 'half': 'i', 'signs': 4}, 'F': {'position': 6, 'half': 'u', 'signs': 1},\n            'G': {'position': 8, 'half': 'i', 'signs': 1}, 'As': {'position': 9, 'half': 'u', 'signs': 4},\n            'A': {'position': 10, 'half': 'i', 'signs': 3}, 'B': {'position': 11, 'half': 'u', 'signs': 2},\n            'H': {'position': 12, 'half': 'i', 'signs': 5}\n        }, // (Not in List: 7->fis/ges)\n        minor: {\n            'c': {'position': 1, 'half': 'u', 'signs': 3}, 'cis': {'position': 2, 'half': 'i', 'signs': 4},\n            'd': {'position': 3, 'half': 'u', 'signs': 1}, 'e': {'position': 5, 'half': 'i', 'signs': 1},\n            'f': {'position': 6, 'half': 'u', 'signs': 4}, 'fis': {'position': 7, 'half': 'i', 'signs': 3},\n            'g': {'position': 8, 'half': 'u', 'signs': 2}, 'gis': {'position': 9, 'half': 'i', 'signs': 5},\n            'a': {'position': 10, 'half': '', 'signs': 0}, 'b': {'position': 11, 'half': 'u', 'signs': 5},\n            'h': {'position': 12, 'half': 'i', 'signs': 2}\n        } // (Not in List: 4->dis/es)\n    }\n    ; // 2: Des + cis; 9: As + gis\n\n    var soundKeys2 = {\n        major: {\n            1: {'name': 'C', 'position': 1, 'half': '', 'signs': 0}, 2: {'name': 'Des', 'position': 2, 'half': 'u', 'signs': 5},\n            3: {'name': 'D', 'position': 3, 'half': 'i', 'signs': 2}, 4: {'name': 'Es', 'position': 4, 'half': 'u', 'signs': 3},\n            5: {'name': 'E', 'position': 5, 'half': 'i', 'signs': 4}, 6: {'name': 'F', 'position': 6, 'half': 'u', 'signs': 1},\n            7: {'name': 'Fis', 'position': 7, 'half': 'i', 'signs': 6}, 8: {'name': 'G', 'position': 8, 'half': 'i', 'signs': 1},\n            9: {'name': 'As', 'position': 9, 'half': 'u', 'signs': 4}, 10: {'name': 'A', 'position': 10, 'half': 'i', 'signs': 3},\n            11: {'name': 'B', 'position': 11, 'half': 'u', 'signs': 2}, 12: {'name': 'H', 'position': 12, 'half': 'i', 'signs': 5}\n        }, // (Was first not in List: 7->fis/ges)\n        minor: {\n            1: {'name': 'c', 'position': 1, 'half': 'u', 'signs': 3}, 2: {'name': 'cis', 'position': 2, 'half': 'i', 'signs': 4},\n            3: {'name': 'd', 'position': 3, 'half': 'u', 'signs': 1}, 4: {'name': 'es', 'position': 4, 'half': 'u', 'signs': 6},\n            5: {'name': 'e', 'position': 5, 'half': 'i', 'signs': 1}, 6: {'name': 'f', 'position': 6, 'half': 'u', 'signs': 4},\n            7: {'name': 'fis', 'position': 7, 'half': 'i', 'signs': 3}, 8: {'name': 'g', 'position': 8, 'half': 'u', 'signs': 2},\n            9: {'name': 'gis', 'position': 9, 'half': 'i', 'signs': 5}, 10: {'name': 'a', 'position': 10, 'half': '', 'signs': 0},\n            11: {'name': 'b', 'position': 11, 'half': 'u', 'signs': 5}, 12: {'name': 'h', 'position': 12, 'half': 'i', 'signs': 2}\n        } // (Was first not in List: 4->dis/es)\n    }; // 2: Des + cis; 9: As + gis\n\n//return {\n//baseToneLength: 500\n//}\n    return {\n//    var xreturn = {\n        baseToneLength: 500,\n        basicTones: basicTones,\n        basicTonesMajor: basicTonesMajor,\n        basicTonesMajor2: basicTonesMajor2,\n        basicTonesMinorRaw: basicTonesMinorRaw,\n        basicTonesMinorRaw2: basicTonesMinorRaw2,\n        basicTonesMinor: basicTonesMinor,\n        basicTonesMajorStaff: {'d': 1, 'r': 2, 'm': 3, 'f': 4, 's': 5, 'l': 6, 't': 7},\n//    var basicTonesMinorStaff = {'l': 1, 't': 2, 'd': 3, 'r': 4, 'm': 5, 'f': 6, 's': 7};\n        basicTonesMinorStaff: {'l': 1 + 7, 't': 2 + 7, 'd': 3, 'r': 4, 'm': 5, 'f': 6, 's': 7},\n        tonePositions: {'d': [3, 1], 'r': [3, 2], 'm': [3, 3], 'f': [2, 2], 's': [2, 3], 'l': [1, 2], 't': [1, 3]},\n        currentNumberOfPlaying: 1,\n        remainingNumberOfPlaying: 1,\n//    scaleRange: Array(1, 9), // Value should later be created automatically;\n        scaleRange: scaleRange, // Value should later be created automatically;\n        centralViewScaleForStart: centralViewScaleForStart,\n        //var centralViewScale = centralViewScaleForStart.slice();  // used for staff and solmi view\n//    var centralViewScale = $.extend(true, {}, centralViewScaleForStart);  // used for staff and solmi view\n        centralViewScale: centralViewScale, // used for staff and solmi view\n//    console.log('centralViewScale: ', centralViewScale);\n//    scalesCurrent: new Array(), <- before require.js\n        scalesCurrent: scalesCurrent,\n//    setScalesCurrent: helpers.setScalesCurrent(),\n        scalesLimit: scalesLimit,\n//    console.log('scalesLimit:', scalesLimit);\n//    var positionOfHalvesInScale = new Array(2, 4, 7, 9, 11); // u, i\n        positionOfHalvesInScale: positionOfHalvesInScale,\n        positionOfFullInScale: positionOfFullInScale,\n        positionInSquare: {'n': 'center', 'u': 'center bottom', 'i': 'center top'},\n//    var soundKeys = new Array(soundKeysMajor, soundKeysMinor);\n        soundKeys: soundKeys, // //DEPRECIATED\n        soundKeys2: soundKeys2,\n        startTimeOfPlay: 0, //0 since require.js\n        currentTimeOfPlay: 0,\n        positonsSharp: new Array(0, -3, 1, -2, -5),\n        positonsFlat: new Array(0, 3, -1, 2, -2),\n        soundKeyCurrent: {'key': 'C', 'position': 1, 'position_staff': 1, 'half': '', 'signs': 0, 'mm': 'major'},\n        setSoundKeyCurrent: function (soundKey) {\n            var soundKeyArray = soundKey.split('');\n            var mm = '';\n            (soundKeyArray[0] === soundKeyArray[0].toUpperCase()) ? mm = 'major' : mm = 'minor';\n            this.soundKeyCurrent = this.soundKeys[mm][soundKey];\n            this.soundKeyCurrent['mm'] = mm;\n            this.soundKeyCurrent['key'] = soundKey;\n            this.soundKeyCurrent['position_staff'] = helpers.setPositionStaffForSoundKey(this.positionOfHalvesInScale, this.soundKeyCurrent['position'], this.soundKeyCurrent['mm']);\n            //        soundKeyCurrent['position_half_relative'] = setPositionHalfRelative(soundKeyCurrent['position'], soundKeyCurrent['mm'], soundKeyCurrent['position_half_relative']);\n            console.log(\"sb setSoundKeyCurrent this.soundKeyCurrent:\", this.soundKeyCurrent);\n        },\n        currentRandomMode: 'withSoundKeys',\n        playData: {'notes': {}},\n        samples: [],\n//    var notesInStaffStart = {'start-left': 100, 'start-bottom': 107, 'height-diff': 7, 'notes-diff': 4,\n//        'notes-left-current': 0, 'note-width': 30, 'inter-tone-signs-width': 6, 'continue': true};\n        notesInStaffStart: notesInStaffStart,\n//    var positonsSharp = new Array(0, -3, 1, -2, -5);\n//    var positonsFlat = new Array(0, 3, -1, 2, -2);\n//    var keySignatures =  {\n//        'C':{'half':'', 'half-count':0},\n//        '':{'half':'', 'half-count':},\n//    };\n\n        noteLengths: {\n            4: {'imageNamePart': '1-1'}, 2: {'imageNamePart': '1-2'}, 1: {'imageNamePart': '1-4'},\n            0.5: {'imageNamePart': '1-8'}, 0.25: {'imageNamePart': '1-16'}, 0.125: {'imageNamePart': '1-32'}\n        },\n        notesInStaff: $.extend(true, {}, notesInStaffStart),\n//    staffRange: new Array(16, 64),\n        staffRange: staffRange,\n        notesNrAndName: {\n            16: 'C', 17: 'Cis/Des', 18: 'D', 19: 'Dis/Es', 20: 'E', 21: 'F', 22: 'Fis/Ges', 23: 'G', 24: 'Gis/As', 25: 'A', 26: 'Ais/B', 27: 'H',\n            28: 'c', 29: 'cis/des', 30: 'd', 31: 'dis/es', 32: 'e', 33: 'f', 34: 'fis/ges', 35: 'g', 36: 'gis/as', 37: 'a', 38: 'ais/b', 39: 'h',\n            40: 'c<sup>1</sup>', 41: 'cis/des<sup>1</sup>', 42: 'd<sup>1</sup>', 43: 'dis/es<sup>1</sup>', 44: 'e<sup>1</sup>', 45: 'f<sup>1</sup>',\n            46: 'fis/ges<sup>1</sup>', 47: 'g<sup>1</sup>', 48: 'gis/as<sup>1</sup>', 49: 'a<sup>1</sup>', 50: 'ais/b<sup>1</sup>', 51: 'h<sup>1</sup>',\n            52: 'c<sup>2</sup>', 53: 'cis/des<sup>2</sup>', 54: 'd<sup>2</sup>', 55: 'dis/es<sup>2</sup>', 56: 'e<sup>2</sup>', 57: 'f<sup>2</sup>',\n            58: 'fis/ges<sup>2</sup>', 59: 'g<sup>2</sup>', 60: 'gis/as<sup>2</sup>', 61: 'a<sup>2</sup>', 62: 'ais/b<sup>2</sup>', 63: 'h<sup>2</sup>',\n            64: 'c<sup>3</sup>'\n        },\n//        frequencyNrIsHalf: frequencyNrIsHalf, // at the moment only useful for staff\n//    console.log('frequencyNrIsHalf: ', frequencyNrIsHalf);\n        randomRange: new Array(28, 52),\n        rangeOfNumberOfNotesInStaff: new Array(4, 25),\n        numberOfNotesInStaffCurrent: 4,\n        samples_length: 44100, // Compare http://en.wikipedia.org/wiki/44,100_Hz\n//    var samples_length = 22050;\n        instruments: new Array('standard', 'clarinet'),\n        currentInstrument: 'clarinet',\n        toneFrequencies: helpers.createFrequencies(),\n        frequencies: createFrequencies.getFrequenciesInfo(soundKeys2, basicTonesMajor2, basicTonesMinorRaw2, positionOfHalvesInScale, positionOfFullInScale),\n//    console.log('toneFrequencies: ', toneFrequencies);\n//    console.log('toneFrequencies[3]: ', toneFrequencies[3]);\n\n        // Messages: later in different place\n        messageNotValid: 'Not a valid string in this context: ',\n        messageToneOutOfRange: 'This tone can\\'t be shown here: ',\n        messageToneLengthNotExist: 'This tone length does not exist: ',\n        messageMaxToneNotSmallerThanMin: 'max tone can\\'t be smaller than min tone!'\n\n//    soundKeySelect: soundKeySelectField(), // now in views/additional.js\n//    var listOfSolmiStrings = getListOfSolmiStrings(); // now in solmiStrings.js\n    };\n});\n",
    "define('models/playSound',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/helpers',\n    'riffwave'\n], function ($, _, Backbone, sb, helpers) {\n\n    return {\n        convert255: function (data) {\n            var data_0_255 = [];\n            for (var i = 0; i < data.length; i++) {\n                data_0_255[i] = 128 + Math.round(127 * data[i]);\n            }\n            return data_0_255;\n        },\n        normalize_invalid_values: function (samples) {\n            for (var i = 0, len = samples.length; i < len; i++) {\n                if (samples[i] > 1) {\n                    samples[i] = 1;\n                } else if (samples[i] < -1) {\n                    samples[i] = -1;\n                }\n            }\n        },\n        playSound: function () {\n            var that = this;\n            var sampleRate = sb.samples_length; // the name(s) might change\n\n            that.normalize_invalid_values(sb.samples); // keep samples between [-1, +1]\n\n            var wave = new RIFFWAVE();\n            wave.header.sampleRate = sampleRate;\n            wave.header.numChannels = 1;\n            var audio = new Audio();\n            var samples2 = that.convert255(sb.samples);\n            wave.Make(samples2);\n            audio.src = wave.dataURI;\n//        setTimeout(function() { // When using setTimeout, in playSolmiString(...) in the first 2 rounds startTimeOfPlay is only NaN instead of a number\n            console.log(\"playSound setTimeout / play:\");\n            sb.startTimeOfPlay = Date.now();\n            audio.play();\n//        }, 10); // page needs time to load?\n        },\n        prepareForPlaySound: function (toneElements, scale, half, position, toneFirstDivision) {\n            console.log(\"prepareForPlaySound sb.soundKeyCurrent:\", sb.soundKeyCurrent);\n            var basicToneNr = sb.basicTonesMajor[toneElements[0]];\n            if (sb.soundKeyCurrent['mm'] === 'minor') {\n                basicToneNr = sb.basicTonesMinor[toneElements[0]];\n//            if(toneElements[0] === 'l' || toneElements[0] === 't'){\n//                basicToneNr += 12;\n//            }\n            }\n            console.log('prepareForPlaySound sb.soundKeyCurrent', sb.soundKeyCurrent);\n            console.log('prepareForPlaySound basicToneNr', basicToneNr);\n            var frequencyNr = 3 + ((scale - 1) * 12) + sb.soundKeyCurrent['position'] +\n                (basicToneNr - 1); // \"-1\" because with +soundKeyCurrent['position'] there js already the tone with the basicToneNr 1.\n        \n            if (half !== '') {\n                if (half === 'u') {\n                    frequencyNr -= 1;\n                } else if (half === 'i') {\n                    frequencyNr += 1;\n                }\n            }\n            \n//            var positionInScale = helpers.getPositionInScaleOfToneNumber(frequencyNr);\n            \n            sb.playData['notes'][position]['frequency-nr'] = frequencyNr;\n            console.log('prepareForPlaySound frequencyNr: ', frequencyNr);\n\n//            var sampleRate = sb.samples_length;\n            this.selectInstrument(sb.currentInstrument, sb.toneFrequencies[frequencyNr], position);\n        },\n        /**\n         * \n         * @param {type} instrument\n         * @param {type} f (the frequency)\n         * @param {type} position\n         * @returns {Array}\n         */\n        selectInstrument: function (instrument, f, position) {\n            var PI = Math.PI,\n                    sin = Math.sin,\n                    exp = Math.exp;\n//        var lengthRatio = baseToneLength / 1000;\n            var lengthRatio = sb.playData['notes'][position]['length'] * sb.baseToneLength / 1000;\n//        var samples = [];\n            var baseIndex = sb.samples.length - 1;\n            if (instrument === 'standard') {\n//            for (var i = 0; i < (samples_length / 2); i++) {\n                for (var i = 0; i < (sb.samples_length * lengthRatio); i++) {\n                    var t = i / sb.samples_length;\n                    sb.samples[baseIndex + i] = sin(f * 2 * PI * t);\n                }\n            } else if (instrument === 'clarinet') {\n//            for (var i = 0; i < (samples_length / 2); i++) {\n                for (var i = 0; i < (sb.samples_length * lengthRatio); i++) {\n//                var t = (i / samples_length)/2;\n                    var t = i / sb.samples_length;\n                    var w = f * 2 * PI * t;\n                    // Odd harmonics\n                    sb.samples[baseIndex + i] = (sin(w) + 0.75 * sin(w * 3) + 0.5 * sin(w * 5) + 0.14 * sin(w * 7) + 0.5 * sin(w * 9) + 0.12 * sin(11 * w) + 0.17 * sin(w * 13)) / (1 + .75 + .5 + .14 + .17);\n                    sb.samples[baseIndex + i] *= exp(t / 1.5);\n                    sb.samples[baseIndex + i] *= exp(-t * 1.5);\n                }\n            }\n//        return samples;\n        }\n    };\n//    function hasGetUserMedia() {\n//        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia ||\n//                navigator.mozGetUserMedia || navigator.msGetUserMedia);\n//    }\n\n});\n",
    "define('models/playStaff',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/helpers'\n], function ($, _, Backbone, sb, helpers) {\n\n    return {\n//        calculateFrequencyNrStaff: function (baseFrequency, addedTonesOf7) {\n//            addedTonesOf7--; // later this correction shound not be needed\n//            var frequencyNrStaff = baseFrequency;\n//\n//            if (addedTonesOf7 !== 0) {\n//                var sign = 1;\n//                if (addedTonesOf7 < 0) {\n//                    sign = -1;\n//                }\n//                console.log('cFNS addedTonesOf7: ', addedTonesOf7);\n////            for (var i = 0; i < addedTonesOf7 * sign; i++ * sign) {\n//                for (var i = 0; i < addedTonesOf7 * sign; i++) {\n//                    if (sb.frequencyNrIsHalf[frequencyNrStaff + sign] === 1) {\n//                        frequencyNrStaff += 2 * sign;\n////console.log('frequencyNr cFNS if frequencyNrStaff', frequencyNrStaff);\n//                    } else {\n//                        frequencyNrStaff += 1 * sign;\n////console.log('frequencyNr cFNS else frequencyNrStaff', frequencyNrStaff);\n//                        console.log('cFNS 75');\n//                    }\n//                }\n//            }\n//            return frequencyNrStaff;\n//        },\n        createKeySignature: function () {\n            if (sb.soundKeyCurrent['half'] !== '') {\n//            var positonsSharp = new Array(0, -3, 1, -2, -5);\n//            var positonsFlat = new Array(0, 3, -1, 2, -2);\n                var violinSteps = 10;\n                var bassSteps = 4;\n                var positionsSign = sb.positonsSharp;\n                var halfFile = 'Sharp.svg';\n                if (sb.soundKeyCurrent['half'] === 'u') {\n                    violinSteps = 6;\n                    bassSteps = 8;\n                    positionsSign = sb.positonsFlat;\n                    halfFile = 'Flat.svg';\n                }\n                var heightViolin = sb.notesInStaffStart['start-bottom'] + (violinSteps * sb.notesInStaffStart['height-diff']);\n                var heightBass = sb.notesInStaffStart['start-bottom'] - (bassSteps * sb.notesInStaffStart['height-diff']);\n//            var left = notesInStaffStart['signature-start-left'] + notesInStaffStart['signature-left-current'];\n                var left = sb.notesInStaffStart['signature-start-left'];\n                var staffAreas = new Array('violin', 'bass');\n                var staffHeights = new Array(heightViolin, heightBass);\n                console.log('createKeySignature staffHeights:', staffHeights);\n                for (var i = 0; i < sb.soundKeyCurrent['signs']; i++) {\n                    for (var j = 0; j < staffAreas.length; j++) {\n                        console.log('createKeySignature i - j:', i + ' - ' + j);\n                        $('div#staff').append('<img src=\"/module/solmik/images/' + halfFile + '\" class=\"sign ' + staffAreas[j] + ' starthalf starthalf-' + i + '\" alt=\"' + sb.soundKeyCurrent['half'] + '\">');\n                        var bottom = staffHeights[j] + (positionsSign[i] * sb.notesInStaff['height-diff']);\n                        $('div#staff .' + staffAreas[j] + '.starthalf-' + i).css({'position': 'absolute', 'bottom': bottom + 'px', 'left': left + 'px'});\n                    }\n                    left += sb.notesInStaff['inter-tone-signs-width'];\n                }\n\n//        $('div#staff').append('<img src=\"images/' + halfFile + '\" class=\"sign half half-' + position + '\" alt=\"' + toneData['half'] + '\">');\n//                $('div#staff .half-' + position).css({'position': 'absolute', 'bottom': bottom + 'px', 'left': left + 'px'});\n//                left += notesInStaff['inter-tone-signs-width'];\n\n//            var notesInStaffStart = {'signature-start-left': 40, 'start-left': 100, 'start-bottom': 107, 'height-diff': 7, 'notes-diff': 4,\n//                'notes-left-current': 0, 'note-width': 30, 'inter-tone-signs-width': 6, 'continue': true};\n\n            }\n        },\n        playStaff: function (position) {\n            var halfFolder = '/module/solmik/images/';\n            var halfNames = ['Sharp', 'Flat', 'Natural'];\n\n            if (position > 0) {\n                var noteNamePartOfPrevious = sb.noteLengths[sb.playData['notes'][position - 1]['length']]['imageNamePart'];\n                $('div#staff .note-' + (position - 1)).attr('src', '/module/solmik/images/' + noteNamePartOfPrevious + '_note.svg');\n\n                var halfInStaffOfPrevious = $('div#staff .half-' + (position - 1));\n                if (!$.isEmptyObject(halfInStaffOfPrevious)) {\n                    for (var i = 0; i < halfNames.length; i++) {\n                        if (halfInStaffOfPrevious.attr('src') === halfFolder + halfNames[i] + '_current.svg') {\n                            halfInStaffOfPrevious.attr('src', halfFolder + halfNames[i] + '.svg');\n                            break;\n                        }\n                    }\n                }\n            }\n\n            var noteNamePart = sb.noteLengths[sb.playData['notes'][position]['length']]['imageNamePart'];\n            $('div#staff .note-' + position).attr('src', '/module/solmik/images/' + noteNamePart + '_note_current.svg');\n\n            var halfInStaff = $('div#staff .half-' + position);\n            if (!$.isEmptyObject(halfInStaff)) {\n                for (var i = 0; i < halfNames.length; i++) {\n                    if (halfInStaff.attr('src') === halfFolder + halfNames[i] + '.svg') {\n                        halfInStaff.attr('src', halfFolder + halfNames[i] + '_current.svg');\n                        break;\n                    }\n                }\n            }\n        },\n//        prepareForPlayStaff: function (solmiArray, position, toneData, toneElements, baseScale, toneFirstDivision) {\n        prepareForPlayStaff: function (position, solmiArray) {\n//            console.log('prepareForPlayStaff solmiArray: ', solmiArray);\n//            console.log('prepareForPlayStaff position: ', position);\n//            console.log('prepareForPlayStaff sb.playData: ', sb.playData);\n            var frequencyNr = sb.playData['notes'][position]['frequency-nr'];\n//            console.log('prepareForPlayStaff frequencyNr', frequencyNr);\n            var imageNamePart = sb.noteLengths[sb.playData['notes'][position]['length']]['imageNamePart'];\n\n            if (frequencyNr >= sb.staffRange[0] && frequencyNr <= sb.staffRange[1]) {\n//                var basePositionOf7 = sb.frequencies[40]['positionOf7'] - 1;  // 40 => c1\n                var basePositionOf7 = sb.frequencies[40]['positionOf7'];  // 40 => c1\n                // in require.js: outside of this function\n\n                var frequency = sb.frequencies[frequencyNr];\n//                console.log('prepareForPlayStaff frequency:', frequency);\n                var soundKeyF = frequency['soundKey'][sb.soundKeyCurrent['mm']][sb.soundKeyCurrent['position']];\n//                console.log('prepareForPlayStaff soundKeyF:', soundKeyF);\n//                console.log('prepareForPlayStaff soundKeyCurrent:', sb.soundKeyCurrent);\n                var addedTonesOf7 = frequency['positionOf7'] - basePositionOf7;\n//                console.log('prepareForPlayStaff addedTonesOf7 10: ', addedTonesOf7);\n\n                var half = sb.playData['notes'][position]['half'];\n//                console.log('prepareForPlayStaff half:', half);\n//                console.log('prepareForPlayStaff addedTonesOf7 50: ', addedTonesOf7);\n\n                var halfFile = '';\n                var halfFileMarker = '';\n/*                var bottomAdd = 0;*/\n                if (frequency['whiteKey'] !== 1) { // so its a # or b note\n//                    console.log('prepareForPlayStaff 300');\n                    var ofKeyMarker = '';\n                    if (!soundKeyF['activeHalf']) { // so it is a base tone of the actual sound key\n                        ofKeyMarker = '_ofKey';\n//                        console.log('prepareForPlayStaff 310');\n                    }\n                    if (half === 'i' || (!soundKeyF['activeHalf'] && sb.soundKeyCurrent['half'] === 'i')) {\n//                        console.log('prepareForPlayStaff 320');\n                        halfFile = 'Sharp' + ofKeyMarker + '.svg';\n                        halfFileMarker = 'i';\n                    } else if (half === 'u' || (!soundKeyF['activeHalf'] && sb.soundKeyCurrent['half'] === 'u')) {\n//                        console.log('prepareForPlayStaff 330');\n                        addedTonesOf7 += 1;\n                        halfFile = 'Flat' + ofKeyMarker + '.svg';\n                        halfFileMarker = 'u';\n                    }\n\n                } else {\n//                    console.log('prepareForPlayStaff 400');\n                    if (soundKeyF['activeHalf'] !== '') {\n/*\n                        // The following outcommented code would use b and # instead of natural, where it is possible,\n                        // but e.g. \"f\" would be shown as \"e#\":\n                        if (soundKeyF['activeHalf'] === 'i' && half === 'i' && $.inArray(frequency['scalePositionOf12'], [6, 1]) > -1) { // [6, 1] => f, c\n                            bottomAdd -= sb.notesInStaff['height-diff'];\n                            halfFile = 'Sharp.svg';\n                            halfFileMarker = 'i';\n                        } else if (soundKeyF['activeHalf'] === 'u' && half === 'u' && $.inArray(frequency['scalePositionOf12'], [5, 12]) > -1) { // [5, 12] => e, h\n                            bottomAdd += sb.notesInStaff['height-diff'];\n                            halfFile = 'Flat.svg';\n                            halfFileMarker = 'u';\n                        } else {\n*/\n                        halfFile = 'Natural.svg';\n                        halfFileMarker = 'na';\n/*                        }*/\n                    }\n                }\n\n/*                var bottom = sb.notesInStaff['start-bottom'] + bottomAdd + addedTonesOf7 * sb.notesInStaff['height-diff'];*/\n                var bottom = sb.notesInStaff['start-bottom'] + addedTonesOf7 * sb.notesInStaff['height-diff'];\n                var left = sb.notesInStaff['start-left'] + sb.notesInStaff['notes-left-current'] + sb.notesInStaff['notes-diff'];\n\n//                console.log('prepareForPlayStaff, left [[before half]]:', left);\n                if (halfFile !== '') {\n                    $('div#staff').append('<img src=\"/module/solmik/images/' + halfFile + '\" class=\"sign half half-' + position + '\" alt=\"' + halfFileMarker + '\">');\n                    $('div#staff .half-' + position).css({'position': 'absolute', 'bottom': bottom + 'px', 'left': left + 'px'});\n                    left += sb.notesInStaff['inter-tone-signs-width'];\n                }\n                $('div#staff').append('<img src=\"/module/solmik/images/' + imageNamePart + '_note.svg\" class=\"sign note note-' + position + '\" alt=\"' + soundKeyF['basicTone'] + '\">');\n                $('div#staff .note-' + position).css({'position': 'absolute', 'bottom': bottom + 'px', 'left': left + 'px'});\n\n                left += sb.notesInStaff['note-width'];\n//                console.log('prepareForPlayStaff, before notesInStaff[notes-left-current]: ', sb.notesInStaff['notes-left-current']);\n                sb.notesInStaff['notes-left-current'] = left - sb.notesInStaff['start-left'];\n\n            } else {\n//            $('#message-staff').empty().append(messageToneOutOfRange + solmiArray[position] + ' (base scale: ' + baseScale + ')');\n                $('#message-staff').empty().append(sb.messageToneOutOfRange + solmiArray[position]);\n                sb.notesInStaff['continue'] = false;\n//            throw new Error(messageToneOutOfRange + solmiArray[position]);// I don't want to end the program totally\n//            return false;// must be something else\n            }\n        }\n    };\n});\n",
    "define('helpers/createSolmiArrayFromToneNumbers',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/helpers'\n], function ($, _, Backbone, sb, helpers) {\n\n    return {\n        create: function (toneNumbers) {\n            var positionOfDoReMiMajor = {1: 'd', 3: 'r', 5: 'm', 6: 'f', 8: 's', 10: 'l', 12: 't'};\n            // later: create positionOfDoReMiMajor automatically out of something like basicTonesMajor\n            var positionOfDoReMiMinor = {1: 'l', 3: 't', 4: 'd', 6: 'r', 8: 'm', 9: 'f', 11: 's'};\n            var positionOfDoReMi = positionOfDoReMiMajor;\n            var noHalves = new Array(5, 12); // m, t\n//        if (soundKeyCurrent['mm' === 'minor']) {\n            if (sb.soundKeyCurrent['mm'] === 'minor') {\n                positionOfDoReMi = positionOfDoReMiMinor;\n                noHalves = new Array(3, 8); // t, m\n            }\n            console.log('toneNumbers:', toneNumbers);\n\n            var solmiArray = new Array();\n            for (var i = 0; i < toneNumbers.length; i++) {\n                var scaleForThisTone = sb.centralViewScaleForStart;\n                var solmiTone = '';\n//            var positionInScale = (toneNumbers[i] - 3) / 12;\n                var positionInScale = helpers.getPositionInScaleOfToneNumber(toneNumbers[i]);\n                console.log('createSolmiArrayFromToneNumbers toneNumbers[i]: ', toneNumbers[i]);\n                console.log('createSolmiArrayFromToneNumbers positionInScale: ', positionInScale);\n//            var positionInScaleForName = positionInScale.slice();\n//            var positionInScaleForName = 0 + positionInScale;\n//            var positionInScaleForName = adjustTonePositionAccordingToSoundKey(positionInScale);\n\n\n                var positionInScaleForName = positionInScale - (sb.soundKeyCurrent['position'] - 1);\n                if (positionInScaleForName < 1) {\n                    positionInScaleForName += 12;\n                    scaleForThisTone += 1;\n                }\n//            var positionInScaleForName = positionInScale + (soundKeyCurrent['position'] - 1);\n//            if (positionInScaleForName > 12) {\n//                positionInScaleForName -= 12;\n//                scaleForThisTone -= 1;\n//            }\n\n                var half = '';\n                console.log('createSolmiArrayFromToneNumbers positionInScaleForName 1:', positionInScaleForName);\n//            var halfExist = $.inArray(positionInScale, sb.positionOfHalvesInScale);\n                var halfExist = $.inArray(positionInScaleForName, sb.positionOfHalvesInScale[sb.soundKeyCurrent['mm']]);\n                if (halfExist > -1) {\n\n                    var halfNr = -1;\n                    //if (sb.frequencyNrIsHalf[toneNumbers[i]] === 0) { // To make sure that a note of a \"full note name\" is in the staff in a height accoring to this name (so not used is an alternative with # or b).\n                    if (sb.frequencies[toneNumbers[i]]['whiteKey'] !== 1) { // To make sure that a note of a \"full note name\" is in the staff in a height accoring to this name (so not used is an alternative with # or b).\n                        if (sb.soundKeyCurrent['half'] === 'i') {\n                            halfNr = 0;\n                        } else if (sb.soundKeyCurrent['half'] === 'u') {\n                            halfNr = 1;\n                        }\n                    }\n                    if (halfNr === -1) {\n                        halfNr = Math.floor((Math.random() * 2));\n                    }\n                    if (halfNr === 0) {\n                        half = 'u';\n//                    positionInScaleForName = positionInScale + 1;\n//                    positionInScaleForName = positionInScaleForName + 1;\n                        positionInScaleForName = helpers.getPositionInScaleOfBasicTone(positionInScaleForName + 1);\n                    } else {\n                        var noHalfIndex = $.inArray(positionInScaleForName, noHalves);\n                        if (noHalfIndex === -1) {\n                            half = 'i';\n//                        positionInScaleForName = positionInScale - 1;\n//                        positionInScaleForName = positionInScaleForName - 1;\n                            positionInScaleForName = helpers.getPositionInScaleOfBasicTone(positionInScaleForName - 1);\n                        }\n                    }\n                }\n                console.log('createSolmiArrayFromToneNumbers positionInScaleForName 2:', positionInScaleForName);\n                console.log('createSolmiArrayFromToneNumbers positionInScaleForName: ', positionInScaleForName);\n                console.log('createSolmiArrayFromToneNumbers positionOfDoReMi[positionInScaleForName]: ', positionOfDoReMi[positionInScaleForName]);\n                solmiTone += positionOfDoReMi[positionInScaleForName] + half;\n//                var scaleOfToneNumber = helpers.getScaleOfToneNumber(toneNumbers[i]);\n                var scaleOfToneNumber = sb.frequencies[toneNumbers[i]]['scale'];\n//            console.log('createSolmiArrayFromToneNumbers scaleOfToneNumber: ', scaleOfToneNumber);\n//            var scalesDiff = centralViewScaleForStart - scaleOfToneNumber;\n                var scalesDiff = scaleForThisTone - scaleOfToneNumber;\n//            console.log('createSolmiArrayFromToneNumbers scalesDiff: ', scalesDiff);\n                if (scalesDiff !== 0) {\n                    if (scalesDiff > 0) {\n                        for (var sc = 0; sc < scalesDiff; sc++) {\n                            solmiTone += \",\";\n                        }\n                    }\n                    if (scalesDiff < 0) {\n                        for (var sc = 0; sc > scalesDiff; sc--) {\n                            solmiTone += \"'\";\n                        }\n                    }\n                }\n\n                solmiArray.push(solmiTone);\n            }\n            console.log('createSolmiArrayFromToneNumbers solmiArray: ', solmiArray);\n            return solmiArray;\n\n        }\n    };\n});\n",
    "define('models/randomize',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/createSolmiArrayFromToneNumbers'\n], function ($, _, Backbone, sb, createSolmiArrayFromToneNumbers) {\n\n    return {\n        randomize: function (currentField) {\n            var that = this;\n            console.log('randomize currentField: ', currentField);\n            var toneMin = parseInt($(currentField).parent('form').find('.tone-min').val());\n            var toneMax = parseInt($(currentField).parent('form').find('.tone-max').val());\n            if (toneMax < toneMin) {\n                alert(sb.messageMaxToneNotSmallerThanMin);\n                throw new Error(sb.messageMaxToneNotSmallerThanMin);\n            }\n            sb.randomRange = Array(toneMin, toneMax);\n            sb.currentRandomMode = $(currentField).parent('form').find('#random-modes').val();\n            if (sb.currentRandomMode === 'withoutSoundKeys') {\n                var soundKey = $(currentField).parent('form').find('.sound-keys').val();\n                sb.setSoundKeyCurrent(soundKey);\n            } else {\n                that.randomizeSoundKeys();\n            }\n            sb.numberOfNotesInStaffCurrent = parseInt($(currentField).parent('form').find('.number-of-notes-in-staff').val());\n            var randomToneNumbers = that.randomizeToneNumbers();\n            var solmiArray = createSolmiArrayFromToneNumbers.create(randomToneNumbers);\n            return solmiArray;\n\n        },\n        randomizeToneNumbers: function () {\n            var toneSequence = new Array();\n            var numberOfValidTones = sb.randomRange[1] - sb.randomRange[0] + 1;\n            for (var i = 0; i < sb.numberOfNotesInStaffCurrent; i++) {\n                var randomToneNumber = Math.floor((Math.random() * numberOfValidTones) + sb.randomRange[0]);\n                toneSequence.push(randomToneNumber);\n            }\n            return toneSequence;\n        },\n        randomizeSoundKeys: function () {\n//        var numberOfSoundKeys = Object.keys(soundKeys['major']).length + Object.keys(soundKeys['minor']).length;\n            var soundKeysArray = new Array();\n            if (sb.currentRandomMode === 'withSoundKeys' || sb.currentRandomMode === 'withSoundKeysMajor') {\n                for (var key in sb.soundKeys['major']) {\n                    soundKeysArray.push(key);\n                }\n            }\n            if (sb.currentRandomMode === 'withSoundKeys' || sb.currentRandomMode === 'withSoundKeysMinor') {\n                for (var key in sb.soundKeys['minor']) {\n                    soundKeysArray.push(key);\n                }\n            }\n            var randomKey = soundKeysArray[Math.floor((Math.random() * soundKeysArray.length))];\n            sb.setSoundKeyCurrent(randomKey);\n        }\n\n    };\n});\n",
    "define('models/playCommon',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/helpers',\n    'models/playSound',\n    'models/playStaff',\n    'models/randomize'\n], function ($, _, Backbone, sb, helpers, playSound, playStaff, randomize) {\n\n    return {\n        changeScalesCurrent: function (scale) {\n\n            $('#all-squares .squares-3x3').removeClass('scale-pos-' + sb.scalesCurrent.join(' scale-pos-'));\n            var scalesDiff = sb.scalesCurrent[0] - scale;\n\n            if (scalesDiff > 0) {\n                sb.scalesCurrent = [scale + 2, scale + 1, scale];\n            } else {\n                sb.scalesCurrent = [scale, scale - 1, scale - 2];\n            }\n\n            $('#all-squares .squares-3x3').each(function (index) {\n                $(this).addClass('scale-pos-' + sb.scalesCurrent[index]);\n            });\n        },\n        getToneDataThroughValidation: function (solmiArray, baseScale, position, toneElements, toneFirstDivision) {\n//        console.log('getScaleThroughValidation solmiArray: ', solmiArray);\n//        console.log('getScaleThroughValidation baseScale: ', baseScale);\n//        console.log('getScaleThroughValidation position: ', position);\n            var half = '';\n            var scale = baseScale;\n            var marksBottom = 0;\n            var marksTop = 0;\n//        if (!$.isEmptyObject(toneElements) && toneElements.length <= (scaleRange[1] + 2)) {\n            if (!$.isEmptyObject(toneElements)) {\n//            console.log('solmiArray[position]: ' + solmiArray[position]);\n                var toneIndex1 = jQuery.inArray(toneElements[0], sb.basicTones);\n                if (toneIndex1 === -1) {\n                    //console.log('x solmiArray[position]: ' + solmiArray[position]);\n                    alert(sb.messageNotValid + solmiArray[position] + ' (10)');\n                    //                throw new Error(messageNotValid + solmiArray[position]);\n                    return false;\n                }\n                if (toneElements.length > 1) {\n                    if (toneElements[1] === \",\") {\n                        marksBottom += 1;\n                    }\n                    else if (toneElements[1] === \"'\") {\n                        marksTop += 1;\n                    }\n                    else if (toneElements[1] === 'u') {\n                        half = 'u';\n                    }\n                    else if (toneElements[1] === 'i') {\n                        half = 'i';\n                    } else {\n                        alert(sb.messageNotValid + solmiArray[position] + ' (20)');\n                        //                    throw new Error(messageNotValid + solmiArray[position]);\n                        return false;\n                    }\n                }\n//            var maxLength = 1 + scaleRange[1] + half.length;\n                if (toneElements.length > 2) {\n                    for (var i = 2; i < toneElements.length; i++) {\n                        if (toneElements[i] === \",\" && marksTop === 0) {\n                            marksBottom += 1;\n                        }\n                        else if (toneElements[i] === \"'\" && marksBottom === 0) {\n                            marksTop += 1;\n                        } else {\n                            alert(sb.messageNotValid + solmiArray[position] + ' (30)');\n                            //                        throw new Error(messageNotValid + solmiArray[position]);\n                            return false;\n                        }\n                    }\n                }\n                if (toneFirstDivision[1] && !sb.noteLengths[parseFloat(toneFirstDivision[1])]) {\n                    alert(sb.messageToneLengthNotExist + toneFirstDivision[1]);\n                    return false;\n                }\n            } else {\n                alert(sb.messageNotValid + solmiArray[position] + ' (40)');\n                //            throw new Error(messageNotValid + solmiArray[position]);\n                return false;\n            }\n\n            if (marksBottom > 0) {\n                if (marksBottom > sb.scalesLimit[baseScale]['sub']) {\n                    alert(sb.messageNotValid + solmiArray[position] + ' (50)');\n                    //                throw new Error(messageNotValid + solmiArray[position]);\n                    return false;\n                }\n                scale -= marksBottom;\n            } else if (marksTop > 0) {\n                if (marksTop > sb.scalesLimit[baseScale]['super']) {\n                    alert(sb.messageNotValid + solmiArray[position] + ' (60)');\n                    //                throw new Error(messageNotValid + solmiArray[position]);\n                    return false;\n                }\n                scale += marksTop;\n            }\n            var toneData = '{\"scale\":' + scale + ',\"half\":\"' + half + '\"' +\n                    ',\"marksBottom\":' + marksBottom + ',\"marksTop\":' + marksTop + '}';\n            return JSON.parse(toneData);\n        },\n        play: function () {\n            playSound.playSound();\n            this.playSolmiString(0);\n        },\n        playSolmiString: function (position) {\n            var that = this;\n            $('#all-squares .row div').css({'background-image': \"none\"});\n            var tone = sb.playData['notes'][position];\n            if ($.inArray(tone['scale'], sb.scalesCurrent) < 0) {\n                that.changeScalesCurrent(tone['scale']);\n            }\n            var currentSquare = $('.scale-pos-' +\n                    tone['scale'] + ' .row:nth-child(' +\n                    tone['position-square-in-scale'][0] + ') div:nth-child(' +\n                    tone['position-square-in-scale'][1] + ')');\n            currentSquare.css({'background-image': \"url('/module/solmik/images/redDot2.png')\",\n                'background-position': sb.positionInSquare[tone['half']]});\n            var tonelength = sb.playData['notes'][position]['length'] * sb.baseToneLength;\n//        playStaff(position, tone);\n            playStaff.playStaff(position);\n            sb.currentTimeOfPlay += tonelength;\n            var dateNow = Date.now();\n            var waitTime = sb.startTimeOfPlay + sb.currentTimeOfPlay - dateNow;\n//            if(waitTime < (sb.startTimeOfPlay + position * tonelength)){\n//            if((dateNow - sb.startTimeOfPlay) < (sb.startTimeOfPlay + position * tonelength)){\n//                alert('waitTime problem!');\n//            }\n            if(waitTime < 0){\n//                alert('waitTime problem! (2)');\n                console.log('playSolmiString, !: waitTime < 0');\n            }\n            that.waitTimeDiffSum += tonelength - waitTime;\n            var timePassed = dateNow - sb.startTimeOfPlay;\n            var waitTime2 =  sb.currentTimeOfPlay - timePassed;\n            var timePassedDiff = timePassed - that.timePassedBefore;\n            that.timePassedBefore = timePassed;\n//            if(){\n            console.log('playSolmiString dateNow: ', dateNow);\n            console.log('playSolmiString sb.currentTimeOfPlay: ', sb.currentTimeOfPlay);\n            console.log('playSolmiString timePassed: ', timePassed);\n            console.log('playSolmiString timePassedDiff: ', timePassedDiff);\n            console.log('playSolmiString waitTime: ', waitTime);\n            console.log('playSolmiString waitTime2: ', waitTime2);\n            console.log('playSolmiString that.waitTimeDiffSum: ', that.waitTimeDiffSum);\n            if (position < sb.playData['notes-length'] - 1) {\n                setTimeout(function () {\n                    that.playSolmiString(position + 1);\n//            }, baseToneLength * tone['period']);\n                }, waitTime2);\n            } else {\n                sb.currentTimeOfPlay = 0;\n                sb.remainingNumberOfPlaying -= 1;\n                if (sb.remainingNumberOfPlaying > 0) {\n                    setTimeout(function () {\n                        that.play();\n                    }, waitTime2);\n                } else {\n                    sb.remainingNumberOfPlaying = sb.currentNumberOfPlaying;\n                }\n            }\n        },\n        waitTimeDiffSum: 0,\n        timePassedBefore: 0,\n        prepareForPlay: function (currentField, mode) {\n            console.log('playCommon.js prepareForPlay currentField', currentField);\n            sb.samples = [];\n            $('#message-staff, .used-string, .notes-string, .frequencies-string').empty();\n            var baseScale = false;\n            if (mode !== 'random') {\nconsole.log('playCommon.js $(currentField)', $(currentField));\nconsole.log('playCommon.js $(currentField).parents(form)', $(currentField).parents('form'));\n//                var soundKey = $(currentField).parent('form').find('.sound-keys').val();\n                var soundKey = $(currentField).parents('form').find('.sound-keys').val();\nconsole.log('playCommon.js soundKey', soundKey);\nconsole.log('playCommon.js x200');\n                sb.setSoundKeyCurrent(soundKey);\nconsole.log('playCommon.js x210');\n                console.log('prepareForPlay, scalesCurrent : ' + sb.scalesCurrent);\n//                var solmiString = $(currentField).parent('form').find('input[type=\"text\"]').val();\n                var solmiString = $(currentField).parents('form').find('input[type=\"text\"]').val();\n//                baseScale = parseInt($(currentField).parent('form').find('.scales').val());\n                baseScale = parseInt($(currentField).parents('form').find('.scales').val());\n                console.log('solmiString: ' + solmiString);\n//        var solmiFirstDivision = solmiString.split('|');\n                var solmiArray = solmiString.split('-');\n            }\n//        var solmiArray = solmiFirstDivision[0].split('-');\n//console.log('prepareForPlay solmiArray: ' + solmiArray);\n            sb.notesInStaff = $.extend(true, {}, sb.notesInStaffStart);\n            $('div#staff img.sign').remove();\n\n            if (mode === 'random') {\n//                try {\n                    solmiArray = randomize.randomize(currentField);\n                    baseScale = sb.centralViewScaleForStart;\n//                } catch (e) {\n//                    console.error(e.message);\n////                return false;\n//                    throw new Error(e.message);\n//                }\n            }\n//        var outputString = 'Used string: ';\n            var outputString = solmiArray.join('-');\n            outputString += ' (used string), ' + sb.soundKeyCurrent['key'] + ' ' + sb.soundKeyCurrent['mm'];\n            $('.used-string').append(outputString);\n\n            playStaff.createKeySignature();\n            console.log('solmiArray: ' + solmiArray);\n            this.prepareForPlaySolmiString(solmiArray, baseScale, 0);\n\n            var frequenciesString = '';\n            var notesString = '';\n            for (var i = 0; i < solmiArray.length; i++) {\n                var frequencyNr = sb.playData['notes'][i]['frequency-nr'];\n                frequenciesString += Math.round(sb.toneFrequencies[frequencyNr]) + '-';\n                (frequencyNr >= sb.staffRange[0] && frequencyNr <= sb.staffRange[1]) ?\n                        notesString += sb.notesNrAndName[frequencyNr] : notesString += 'x';\n                notesString += '-';\n            }\n            $('.frequencies-string').append(frequenciesString + ' (frequencies)');\n            $('.notes-string').append(notesString + ' (notes)');\n\n\n            console.log('prepareForPlay playData: ', sb.playData);\n            console.log('prepareForPlay soundKeyCurrent: ', sb.soundKeyCurrent);\n            console.log('prepareForPlay currentNumberOfPlaying: ', sb.currentNumberOfPlaying);\n\n            this.play();\n\n        },\n        prepareForPlaySolmiString: function (solmiArray, baseScale, position) {\n            sb.playData['notes'][position] = {};\n            var toneFirstDivision = solmiArray[position].split('|');\n            sb.playData['notes'][position]['length'] = 1;\n            if (toneFirstDivision[1]) {\n                sb.playData['notes'][position]['length'] = parseFloat(toneFirstDivision[1]);\n            }\n//        var toneElements = solmiArray[position].split('');\n            var toneElements = toneFirstDivision[0].split('');\n            var toneData = this.getToneDataThroughValidation(solmiArray, baseScale, position, toneElements, toneFirstDivision);\n            if (toneData === false) {\n                return false;\n            }\n            var scale = toneData['scale'];\n            var half = toneData['half'];\n\n            console.log('scalesCurrent: ', sb.scalesCurrent);\n            if (position === 0 && $.inArray(scale, sb.scalesCurrent) < 0) {\n                sb.scalesCurrent = helpers.setScalesCurrent(sb.scaleRange, sb.centralViewScale, sb.scalesCurrent); // Without it: The last values from the string before are taken\n            }\n            sb.playData['notes'][position]['scale'] = scale;\n//        playData['notes'][position]['period'] = 1;\n            var tone = sb.tonePositions[toneElements[0]];\n            sb.playData['notes'][position]['position-square-in-scale'] = tone;\n            console.log('prepareForPlaySolmiString tone: ', tone);\n            if (half === '') {\n                sb.playData['notes'][position]['half'] = 'n';\n            } else {\n                sb.playData['notes'][position]['half'] = half;\n            }\n            playSound.prepareForPlaySound(toneElements, scale, half, position, toneFirstDivision);\n            if (sb.notesInStaff['continue'] === true) {\n//                playStaff.prepareForPlayStaff(solmiArray, position, toneData, toneElements, baseScale, toneFirstDivision);\n                playStaff.prepareForPlayStaff(position, solmiArray);\n            }\n//        prepareForPlaySound(toneElements, scale, half, position);\n            console.log('prepareForPlaySolmiString solmiArray.length: ', solmiArray.length);\n            console.log('prepareForPlaySolmiString position: ', position);\n            if (position < solmiArray.length - 1) {\n                this.prepareForPlaySolmiString(solmiArray, baseScale, position + 1);\n            } else {\n                sb.playData['notes-length'] = solmiArray.length;\n            }\n        }\n    };\n});\n",
    "define('models/startfrequenciestuner',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'tuner',\n    'frequenciesextractor'\n], function ($, _, Backbone) {\n\n    return {\n        frequencyBefore: 0,\n        tunerActive: false,\n        tunerShowData: true,\n        startTuner: function () {\n\n            window.AudioContext = window.AudioContext ||\n                    window.webkitAudioContext;\n\n            navigator.getMedia = (navigator.getUserMedia ||\n                    navigator.webkitGetUserMedia ||\n                    navigator.mozGetUserMedia ||\n                    navigator.msGetUserMedia);\n\n            var audioContext = new AudioContext();\n\n            var gotStreamCallback = function gotStreamCallbackFunction(mediaStream) {\n                var microphoneSource = audioContext.createMediaStreamSource(mediaStream);\n\n                var tuner = new Tuner(microphoneSource, audioContext.destination, audioContext);\n\n                tuner.start(function (note) {\n//            $('#frequencies-string2').text(note);\n                    if (this.tunerShowData === true\n                            && note !== 0 && note !== 64 && note !== 75\n                            && note !== this.frequencyBefore) {\n                        $('#frequencies-string2').append('-' + note);\n                    }\n                    this.frequencyBefore = note;\n                });\n\n            };\n\n            var errorCallback = function errorCallbackFunction(error) {\n                console.log(error);\n            };\n\n            navigator.getMedia({audio: true}, gotStreamCallback, errorCallback);\n        }\n    };\n});\n",
    "define('views/forms',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics'\n], function ($, _, Backbone, sb) {\n\n    var soundKeySelect = soundKeySelectField();\n\nfunction frequenciesForm() {\n    var form = '<form class=\"frequencies\">';\n    form += '<input type=\"submit\" class=\"start\" value=\"Start\">';\n    form += '<input type=\"submit\" class=\"stop\" value=\"Stop\">';\n    form += '<input type=\"submit\" class=\"reset\" value=\"Reset\">';\n    form += '</form>';\n    return form;\n}\n\n    /**\n     * \n     * @returns {String}\n     */\n    function soundKeySelectField() {\n        var select = '<select name=\"sound-keys\" class=\"sound-keys\">' + \"/n\";\n        var mm = new Array('major', 'minor');\n//        for (var i = 0; i < soundKeys.length; i++) {\n//            for (var soundkey in soundKeys[i]) {\n        for (var i = 0; i < mm.length; i++) {\n            for (var soundkey in sb.soundKeys[mm[i]]) {\n                select += '<option value=\"' + soundkey + '\">' + soundkey + '</option>';\n            }\n        }\n        select += '</select>';\n        return select;\n    }\n\n    return {\n        baseScaleSelectField: function (solmiString) {\n            var select = '<select name=\"scales\" class=\"scales\">' + \"/n\";\n            for (var i = sb.scaleRange[1]; i >= sb.scaleRange[0]; i--) {\n                var selected = '';\n                if (i === solmiString['base_scale']) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + i + '\"' + selected + '>' + i + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        frequenciesForm: frequenciesForm(),\n        randomForm: function () {\n            var form = '<form id=\"random\">';\n            form += 'Random: <br>';\n            form += this.selectFieldForRandomMode() + '<br>';\n            form += this.selectFormWithToneNames('min', 0);\n            form += this.selectFormWithToneNames('max', 1);\n            form += '<br>sound key:' + this.soundKeySelect + \"\\n\";\n            form += this.selectFieldForNumberOfNotesInStaff() + '<br>';\n//            form += '<input type=\"submit\" class=\"go\" value=\"Go\">';\n            form += '<input class=\"go\" type=\"button\" value=\"Go\" name=\"go\">';\n            form += '</form>';\n            return form;\n        },\n        selectFieldForCentralViewScale: function () {\n            var select = '<br>Central view scale: <select name=\"central-view-scale\" id=\"central-view-scale\">' + \"/n\";\n            for (var i = sb.scaleRange[1] - 1; i >= sb.scaleRange[0] + 1; i--) {\n                var selected = '';\n                if (i === sb.centralViewScale) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + i + '\"' + selected + '>' + i + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        selectFieldForInstruments: function () {\n            var select = '<br>Instrument: <select name=\"instruments\" id=\"instruments\">' + \"/n\";\n            for (var i = 0; i < sb.instruments.length; i++) {\n                var selected = '';\n                if (sb.instruments[i] === sb.currentInstrument) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + sb.instruments[i] + '\"' + selected + '>' + sb.instruments[i] + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        selectFieldForNumberOfNotesInStaff: function () {\n            var select = 'number of notes: <select name=\"number-of-notes-in-staff\" class=\"number-of-notes-in-staff\">' + \"/n\";\n            for (var i = sb.rangeOfNumberOfNotesInStaff[0]; i <= sb.rangeOfNumberOfNotesInStaff[1]; i++) {\n                var selected = '';\n                if (i === sb.numberOfNotesInStaffCurrent) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + i + '\"' + selected + '>' + i + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        selectFieldForRandomMode: function () {\n            var modes = {\n                'withSoundKeys': 'with random sound keys',\n                'withSoundKeysMajor': 'with major random sound keys',\n                'withSoundKeysMinor': 'with minor random sound keys',\n                'withoutSoundKeys': 'without random sound keys'\n            };\n            var select = 'mode: <select name=\"random-modes\" id=\"random-modes\">' + \"/n\";\n            for (var mode in modes) {\n                var selected = '';\n                if (mode === sb.currentRandomMode) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + mode + '\"' + selected + '>' + modes[mode] + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        selectFieldForRepetition: function () {\n            var select = '<br>How often play: <select name=\"repetition\" id=\"repetition\">' + \"/n\";\n            var numberOfPlaying = [1, 2, 3, 5, 10];\n            for (var i = 0; i < numberOfPlaying.length; i++) {\n                var selected = '';\n                if (numberOfPlaying[i] === sb.currentNumberOfPlaying) {\n                    selected = ' selected';\n                }\n                select += '<option value=\"' + numberOfPlaying[i] + '\"' + selected + '>' + numberOfPlaying[i] + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n        selectFormWithToneNames: function (name, rangePosition) {\n            var select = name + ': <select name=\"' + name + '\" class=\"tone-' + name + '\">' + \"/n\";\n            //for (var noteNr in notesNrAndName) {\n            for (var i = sb.staffRange[1]; i > sb.staffRange[0]; i--) {\n                var selected = '';\n//            if (noteNr === randomRange[rangePosition]) {\n                if (i === sb.randomRange[rangePosition]) {\n                    selected = ' selected';\n                }\n//            select += '<option value=\"' + noteNr + '\"' + selected + '>' + notesNrAndName[noteNr] + '</option>';\n                select += '<option value=\"' + i + '\"' + selected + '>' + sb.notesNrAndName[i] + '</option>';\n            }\n            select += '</select>';\n            return select;\n        },\n//        solmiStringForm: function (solmiString) {\n//            var form = '<form>';\n//            form += '<input type=\"checkbox\" name=\"solmi-string\" value=\"standard\">' + \"\\n\";\n//            form += soundKeySelect + \"\\n\";\n//            form += this.baseScaleSelectField(solmiString) + \"\\n\";\n//            form += '<input type=\"text\" value=\"' + solmiString['string'] + '\">' + \"\\n\";\n//            form += '<input type=\"submit\" class=\"go\" value=\"Go\">';\n////        form += '<input type=\"submit\" class=\"random\" value=\"Random\">';\n//            form += '</form>';\n//            return form;\n//        },\n        soundKeySelect: soundKeySelect\n    };\n});\n",
    "define('views/additional',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics'\n], function ($, _, Backbone, sb) {\n\n    return {\n//      soundKeySelect: soundKeySelectField(),\n        inputBaseToneLength: function () {\n            return '<br>Base tone length: <input id=\"base-tone-length\" type=\"text\" value=\"' + sb.baseToneLength + '\">';\n        }\n    };\n});\n",
    "define('solmiMain',[\n    'jquery',\n    'underscore',\n    'backbone',\n    'solmiBasics',\n    'helpers/helpers',\n    'models/playCommon',\n    'models/startfrequenciestuner',\n    'views/forms',\n    'views/additional'\n], function ($, _, Backbone, sb, helpers, playCommon, startfrequenciestuner, forms, viewsAdd) {\n    \n//        $('#div1').after(selectFieldForRandomMode());\n    $('#div1').after(forms.randomForm());\n    $('#div1').after(viewsAdd.inputBaseToneLength());\n    $('#div1').after(forms.selectFieldForRepetition());\n    $('#div1').after(forms.selectFieldForInstruments());\n    $('#div1').after(forms.selectFieldForCentralViewScale());\n\n    for (var i = 1; i <= 2; i++) {\n        $('.squares-3x3 .row:nth-child(' + i + ') div:first-child').css({'visibility': 'hidden'});\n    }\n\n    $('#solmi-strings form .go').click(function () {\n        console.log('scalesCurrent after click go: ', sb.scalesCurrent);\n//        try {\n            playCommon.prepareForPlay(this);\n//        } catch (e) {\n//            console.error(e.message);\n//            return false;\n//        }\n//        return false;\n    });\n//        $('#solmi-strings form .random').click(function() {\n//            console.log('scalesCurrent after click random: ', scalesCurrent);\n//            try {\n//                prepareForPlay(this, 'random');\n//            } catch (e) {\n//                console.error(e.message);\n//                return false;\n//            }\n//            return false;\n//        });\n\n    $('form#random .go').click(function () {\n        console.log('scalesCurrent after click form#random: ', sb.scalesCurrent);\n//        try {\n            playCommon.prepareForPlay(this, 'random');\n//        } catch (e) {\n//            console.error(e.message);\n//            return false;\n//        }\n//        return false;\n    });\n\n    $('#central-view-scale').change(function () {\n        $('#all-squares .row div').css({'background-image': \"none\"});\n        sb.centralViewScale = parseInt($(this).val());\n        sb.scalesCurrent = helpers.setScalesCurrent(sb.scaleRange, sb.centralViewScale, sb.scalesCurrent);\n    });\n\n    $('#instruments').change(function () {\n        sb.currentInstrument = $(this).val();\n    });\n\n    $('#repetition').change(function () {\n        sb.remainingNumberOfPlaying = sb.currentNumberOfPlaying = parseInt($(this).val());\n    });\n\n    $('#base-tone-length').change(function () {\n        sb.baseToneLength = parseInt($(this).val());\n    });\n\n//        $('#random-modes').change(function() {\n//            currentRandomMode = $(this).val();\n//        });\n\n    $('.sound-keys').change(function () {// later: remove this, action only if form is clicked\n        var soundKey = $(this).val();\n        sb.setSoundKeyCurrent(soundKey);\n    });\n\n    $('#frequencies-string2').after(forms.frequenciesForm);\n    $('form.frequencies .start').click(function () {\n\n        try {\n            if (startfrequenciestuner.tunerActive === false) {\n                startfrequenciestuner.tunerActive = true;\n                startfrequenciestuner.startTuner();\n            } else {\n                startfrequenciestuner.tunerShowData = true;\n            }\n        } catch (e) {\n            console.error(e.message);\n            return false;\n        }\n        return false;\n    });\n    $('form.frequencies .stop').click(function () {\n        try {\n            startfrequenciestuner.tunerShowData = false;\n        } catch (e) {\n            console.error(e.message);\n            return false;\n        }\n        return false;\n    });\n    $('form.frequencies .reset').click(function () {\n        try {\n            $('#frequencies-string2').empty();\n        } catch (e) {\n            console.error(e.message);\n            return false;\n        }\n        return false;\n    });\n//    if (hasGetUserMedia()) {\n//        alert('Has getUserMedia!');\n//    } else {\n//        alert('getUserMedia() is not supported in your browser');\n//    }\n\n    return {};\n});\n",
    "define('solmi',[\n  'solmiBasics',\n  'solmiMain'\n], function(solmiBasics, solmiMain){\n//], function(solmiBasics){\n  console.log('solmi.js, solmiBasics', solmiBasics);\n  return {};\n});\n\n// TODO:\n// \n// - (sometimes) the last tone is one tone after the last staff note is shown\n//     \n// - Frontend output of frequences + note-names, especially in connection with random:\n//   - at which stage taken for this output?\n//     - Is importent for testing\n//     \n// - getSolmiToneOfSoundKeyFromFrequency(...)\n//    Maybe other solution for the following code:\n//            } else if (half === '') { // for soundKey C, a\n//                solmiToneNr--;\n//                half = 'i';\n//            }\n//    => maybe adapt it better in var soundKeys2\n// \n// - $('#base-tone-length').change(function() {\n//   - add handling of wrong input (not int, not within a limit)\n// \n// - \"DEPRECIATED\": rewrite code so that code marked with \"DEPRECIATED\" needs not be used any more\n// \n// - maybe still problem with minor\n// - frequencies:\n//   - ...\n// - staff:\n//   - a bit smaller?\n// - input through microphone, output\n// - include soundkey in solmi-string\n// - all Dur / all Moll one after the other for one string\n//   - 2014-11-09: ?\n// - sound off/on\n// \n//     \n// later:\n// - use of backbone.js?\n// - when a new solmiString is played before an other has ended:\n//   - Interrupt the old one before the new one is played\n// - throw new Error:\n//   - Where is output?\n// - 'please wait' or similar (eg circuling mouse pointer)\n//   - when long solmiString is selected\n// - test for whitespace in solmi string\n//   - string = string.trim()\n// - (better picture(s) for u/i in solmi view?)\n// - in chromium (not chrome) a solmiString does not lead to the correct position\n// - \n// - special code to make pixels less visible?\n// - createFrequencies(): Calculate 111\n// - var basicToneNr\n//   - put it earlier, it does not need to be in every loop?\n//     - but later it might be needed there, when the keys also can change within a solmi string\n// - limit Length of solmiString?\n//   - might only be relevant, if somebody gets into the access restricted backend.;\n",
    "require.config({\n//  baseUrl: 'js/',\n    paths: {\n        jquery: [ 'http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min', 'libs/jquery/jquery-1.11.2.min' ],\n        underscore: 'libs/underscore/underscore-min-1.7.0',\n        backbone: 'libs/backbone/backbone-min-1.1.2',\n//    helpers: 'helpers',\n//    views: 'views'\n//    solmiBasics: 'solmiBasics'\n        riffwave: 'libs/riffwave/riffwave',\n        tuner: 'models/tuner',\n        frequenciesextractor: 'models/frequenciesextractor',\n        notesfrequencies: 'models/notesfrequencies'\n    },\n    shim: {\n        riffwave: {\n//            exports: 'Riffwave'\n        },\n        tuner: {},\n        frequenciesextractor: {},\n        notesfrequencies: {},\n        underscore: {\n            exports: \"_\"\n        },\n        backbone: {\n            deps: [\"jquery\", \"underscore\"],\n            exports: \"Backbone\"\n        }\n    }\n//    deps: ['solmi']\n\n});\n\nrequire([\"infrastructure\"], function () {\n    require([\"solmi\"], function (solmi) {\n//        app.init();\n    });\n});\n\n\n//require([\n//\n//  // Load our app module and pass it to our definition function\n////  'solmiBasics'\n//  'test10'\n//], function(sb){\n////    console.log('solmiBasics', sb);\n//  // The \"app\" dependency is passed in as \"App\"\n////  App.initialize();\n//});\n\ndefine(\"config\", function(){});\n\n"
  ]
}